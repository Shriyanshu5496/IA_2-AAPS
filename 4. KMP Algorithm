The KMP algorithm is used to find all occurrences of a pattern in a text string efficiently, in O(n + m) time, where:
n is the length of the text
m is the length of the pattern

->Key Concepts
KMP avoids re-checking characters by precomputing a prefix function (also called the LPS array â€” Longest Prefix which is also Suffix).

->LPS Array Example
For pattern "ababc":
Index:     0 1 2 3 4
Pattern:   a b a b c
LPS:       0 0 1 2 0

Code:
#include <iostream>
#include <vector>
using namespace std;
vector<int> computeLPS(const string& pattern) {
    int m = pattern.length();
    vector<int> lps(m);
    int len = 0;
    lps[0] = 0;

    int i = 1;
    while (i < m) {
        if (pattern[i] == pattern[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}
void KMP(const string& text, const string& pattern) {
    int n = text.length();
    int m = pattern.length();
    vector<int> lps = computeLPS(pattern);
    int i = 0, j = 0;
    while (i < n) {
        if (text[i] == pattern[j]) {
            i++;
            j++;
        }
        if (j == m) {
            cout << "Pattern found at index " << i - j << endl;
            j = lps[j - 1];
        } else if (i < n && text[i] != pattern[j]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }
}
int main() {
    string text = "ababcababcabc";
    string pattern = "ababc";
    KMP(text, pattern);
    return 0;
}

Output:
Pattern found at index 0
Pattern found at index 5


