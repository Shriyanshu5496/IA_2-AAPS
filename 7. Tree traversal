Tree traversal is the process of visiting each node in a tree exactly once in a specific order.

1. Inorder Traversal
Order: Left → Root → Right
Steps:
Traverse the left subtree (inorder)
Visit the current node (root)
Traverse the right subtree (inorder)

2. Preorder Traversal
Order: Root → Left → Right
Steps:
Visit the current node (root)
Traverse the left subtree (preorder)
Traverse the right subtree (preorder)

3. Postorder Traversal
Order: Left → Right → Root
Steps:
Traverse the left subtree (postorder)
Traverse the right subtree (postorder)
Visit the current node (root)

Code: 

#include <iostream>
using namespace std;
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

void inorder(TreeNode* root) {
    if (root == nullptr) return;
    inorder(root->left);
    cout << root->val << " ";
    inorder(root->right);
}

void preorder(TreeNode* root) {
    if (root == nullptr) return;
    cout << root->val << " ";
    preorder(root->left);
    preorder(root->right);
}

void postorder(TreeNode* root) {
    if (root == nullptr) return;
    postorder(root->left);
    postorder(root->right);
    cout << root->val << " ";
}

int main() {
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);

    cout << "Inorder traversal: ";
    inorder(root);
    cout << "\n";
    cout << "Preorder traversal: ";
    preorder(root);
    cout << "\n";
    cout << "Postorder traversal: ";
    postorder(root);
    cout << "\n";
    return 0;
}

Output:
Inorder traversal: 4 2 5 1 3
Preorder traversal: 1 2 4 5 3
Postorder traversal: 4 5 2 3 1


