->Depth-First Search (DFS) is a graph traversal algorithm that explores as far as possible along a branch before backtracking. It uses a stack (explicitly or via recursion).
Key Characteristics
Strategy: Go deep before wide.
Common Uses: Cycle detection, connected components, topological sort, maze solving.
Data Structure: Recursion (call stack) or manual stack.
Works for: Directed and Undirected graphs.

Code:
#include <iostream>
#include <vector>
using namespace std;
void dfs(int node, const vector<vector<int>>& adj, vector<bool>& visited) {
    visited[node] = true;
    cout << node << " ";
    for (int neighbor : adj[node]) {
        if (!visited[neighbor]) {
            dfs(neighbor, adj, visited);
        }
    }
}
int main() {
    int V = 6;
    vector<vector<int>> adj(V);
    adj[0] = {1, 2};
    adj[1] = {0, 3, 4};
    adj[2] = {0, 4};
    adj[3] = {1, 5};
    adj[4] = {1, 2};
    adj[5] = {3};

    vector<bool> visited(V, false);
    cout << "DFS traversal starting from node 0: ";
    dfs(0, adj, visited);
    cout << endl;
    return 0;
}

Output:
DFS traversal starting from node 0: 0 1 3 5 4 2

