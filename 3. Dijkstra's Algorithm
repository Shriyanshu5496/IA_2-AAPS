Dijkstra's Algorithm which is used to find the shortest path from a source node to all other nodes in a weighted graph with non-negative edge weights.
1. Adjacency List to represent the graph.
2. Priority Queue (min-heap) to always process the closest unvisited node.
3. Distance vector to track the minimum distance to each node.
Code:

#include <iostream>
#include <vector>
#include <queue>
using namespace std;
using pii = pair<int, int>;
void dijkstra(int V, vector<vector<pii>>& adj, int source) {
    vector<int> dist(V, INT_MAX);
    dist[source] = 0;

    priority_queue<pii, vector<pii>, greater<pii>> pq;
    pq.push({0, source});

    while (!pq.empty()) {
        int currDist = pq.top().first;
        int u = pq.top().second;
        pq.pop();

        if (currDist > dist[u]) continue;

        for (auto& edge : adj[u]) {
            int v = edge.first;
            int weight = edge.second;

            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v], v});
            }
        }
    }
    cout << "Shortest distances from node " << source << ":\n";
    for (int i = 0; i < V; ++i) {
        cout << "Node " << i << " -> " << dist[i] << '\n';
    }
}
int main() {
    int V = 5;
    vector<vector<pii>> adj(V);
    adj[0].push_back({1, 2});
    adj[0].push_back({2, 4});
    adj[1].push_back({2, 1});
    adj[1].push_back({3, 7});
    adj[2].push_back({4, 3});
    adj[3].push_back({4, 1});
    int source = 0;
    dijkstra(V, adj, source);
    return 0;
}
